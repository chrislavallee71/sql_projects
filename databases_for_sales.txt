CREATE TABLE IF NOT EXISTS sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT,
    sale_date DATE NOT NULL,
    customer_id INT NOT NULL,
    product_id INT NOT NULL,
    employee_id INT NOT NULL,
    quantity INT NOT NULL,
    total_price DECIMAL NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (customer_id),
    FOREIGN KEY (product_id) REFERENCES products (product_id),
    FOREIGN KEY (employee_id) REFERENCES employees (employee_id)
);

CREATE TABLE IF NOT EXISTS manufacturers (
    manufacturer_id INT PRIMARY KEY AUTO_INCREMENT, 
    name VARCHAR(45) NOT NULL, 
    country VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    manufacturer_id INT NOT NULL,
    model VARCHAR(45) NOT NULL, 
    price DECIMAL NOT NULL, 
    horsepower INT NOT NULL,
    fuel_efficiency INT NOT NULL,
    FOREIGN KEY (manufacturer_id) REFERENCES manufacturers (manufacturer_id)
);

CREATE TABLE IF NOT EXISTS inventory (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    quantity INT NOT NULL, 
    reorder_level INT NOT NULL DEFAULT 2,
    last_inventory_date DATE NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);


CREATE TRIGGER update_inventory
AFTER INSERT ON sales
FOR EACH ROW
BEGIN
    UPDATE inventory
    SET
        quantity = quantity - NEW.quantity,
        last_inventory_date = NEW.sale_date
    WHERE product_id = NEW.product_id;
END;

INSERT INTO sales (sale_date, customer_id, product_id, employee_id, quantity, total_price) 
VALUES
    (DATE('2023-05-01'), 1, 1, 1, 2, 56000.00),
    (DATE('2023-05-02'), 2, 2, 1, 1, 22000.00),
    (DATE('2023-05-02'), 1, 3, 2, 1, 41250.00),
    (DATE('2023-05-03'), 2, 4, 2, 2, 60000.00),
    (DATE('2023-05-03'), 1, 1, 2, 3, 84000.00);

SELECT * FROM inventory;


CREATE INDEX 
    customer_sales_product 
ON 
    sales (customer_id, product_id);


CREATE VIEW sales_summary AS
SELECT 
    p.model, 
    SUM(s.quantity) AS total_sold
FROM 
    sales s
JOIN 
    products p ON p.product_id = s.product_id
GROUP BY
    p.model;


SELECT
    *
FROM 
    sales_summary;


WITH RevenueCTE AS (
    SELECT 
        e.employee_id,
        CONCAT(e.first_name, ' ', e.last_name) AS employee_name,
        e.position,
        SUM(s.total_price) / SUM(SUM(s.total_price)) OVER () AS percent_revenue
    FROM 
        employees e
    JOIN (
        SELECT 
            employee_id,
            SUM(total_price) AS total_price
        FROM 
            sales
        WHERE 
            sale_date BETWEEN '2023-05-01' AND '2023-05-31'
        GROUP BY 
            employee_id
    ) s ON s.employee_id = e.employee_id
    GROUP BY 
        employee_id, employee_name, e.position
)

SELECT 
    employee_name,
    position,
    "May 2023" as month_year,
    CASE  
        WHEN percent_revenue < 0.05 THEN 0
        WHEN percent_revenue BETWEEN 0.05 AND 0.09 THEN 2000
        WHEN percent_revenue BETWEEN 0.1 AND 0.19 THEN 5000
        WHEN percent_revenue BETWEEN 0.2 AND 0.29 THEN 10000
        WHEN percent_revenue BETWEEN 0.3 AND 0.4 THEN 15000
        ELSE 25000
    END AS employee_bonus
FROM 
    RevenueCTE e
WHERE 
    position = 'Sales Associate';


SELECT
    p.model,
    MAX(p.price) AS price,
    SUM(s.total_price) AS total_sale_per_model,
    SUM(i.quantity) OVER (PARTITION BY i.product_id) AS inventory_per_model,
    SUM(s.total_price) / SUM(i.quantity) OVER (PARTITION BY i.product_id) AS sales_inventory_ratio
FROM 
    sales s
JOIN
    products p ON s.product_id = p.product_id
JOIN
    inventory i ON i.product_id = p.product_id
GROUP BY
    p.model, i.product_id
ORDER BY sales_inventory_ratio DESC;
